#!/opt/chef/embedded/bin/ruby
# Encoding: utf-8
# vim: syntax=ruby:expandtab:shiftwidth=2:softtabstop=2:tabstop=2

# Copyright 2013-2014 Facebook
# Copyright 2014-present One.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# rubocop:disable Style/AccessorMethodName, Style/RedundantReturn, GlobalVars

require 'chef_diff/repo/svn'
require 'chef_diff/repo/git'
require 'chef_diff/changeset'
require 'running_sushi/config'
require 'running_sushi/logging'
require 'running_sushi/hooks'
require 'running_sushi/knife'
require 'chef/config'
require 'optparse'
require 'logger'
require 'json'

class ChangeProxy
  attr_accessor :full_name

  def to_s
    @full_name
  end

  def initialize(full_name)
    @full_name = full_name
  end
end

$success = false
$status_msg = 'NO WORK DONE'
$lockfileh = nil

def action(msg)
  if RunningSushi::Config.dry_run
    RunningSushi::Log.warn("[DRYRUN] Would do: #{msg}")
  else
    RunningSushi::Log.warn(msg)
  end
end

def get_lock
  RunningSushi::Log.warn('Attempting to acquire lock')
  $lockfileh = File.open(RunningSushi::Config.lockfile,
                         File::RDWR | File::CREAT, 0600)
  $lockfileh.flock(File::LOCK_EX)
  RunningSushi::Log.warn('Lock acquired')
end

def write_pidfile
  File.write(RunningSushi::Config.pidfile, Process.pid)
end

def delete_pidfile
  File.delete(RunningSushi::Config.pidfile) if File.exist?(RunningSushi::Config.pidfile)
end

def checkpoint_path
  File.join(RunningSushi::Config.master_path,
            RunningSushi::Config.rev_checkpoint)
end

def write_checkpoint(rev)
  File.write(checkpoint_path, rev) unless RunningSushi::Config.dry_run
end

def read_checkpoint
  RunningSushi::Log.debug("Reading #{checkpoint_path}")
  File.exist?(checkpoint_path) ? File.read(checkpoint_path).strip : nil
end

def node_checkpoint_path
  File.join(RunningSushi::Config.master_path,
            RunningSushi::Config.node_checkpoint)
end

def write_node_checkpoint(nodes, rev)
  node_checkpoint = [rev, nodes]
  File.write(node_checkpoint_path, node_checkpoint.to_json) unless RunningSushi::Config.dry_run
end

def read_node_checkpoint
  RunningSushi::Log.debug("Reading #{node_checkpoint_path}")

  return nil, [] unless File.exist?(node_checkpoint_path)

  upload_checkpoint = JSON.parse(File.read(node_checkpoint_path))
  checkpoint = upload_checkpoint[0]
  nodes = upload_checkpoint[1]
  return checkpoint, nodes
end

def get_pod_config
  node_dir = RunningSushi::Config.node_path
  client_dir = RunningSushi::Config.client_path
  environment_dir = RunningSushi::Config.environment_path
  role_local_dir = RunningSushi::Config.role_local_path

  if RunningSushi::Config.pod_name
    node_dir = File.join(node_dir, RunningSushi::Config.pod_name.to_s)
    client_dir = File.join(client_dir, RunningSushi::Config.pod_name.to_s)
    environment_dir = File.join(environment_dir, RunningSushi::Config.pod_name.to_s)
    role_local_dir = File.join(role_local_dir, RunningSushi::Config.pod_name.to_s)
  end

  return node_dir, client_dir, environment_dir, role_local_dir
end

def chef_upload(knife, repo, checkpoint, local_head)
  RunningSushi::Log.warn(
    "Determing changes... from #{checkpoint} to #{local_head}"
  )

  node_dir, client_dir, environment_dir, role_local_dir = get_pod_config

  begin
    changeset = ChefDiff::Changeset.new(
      RunningSushi::Log,
      repo,
      checkpoint,
      local_head,
      cookbook_dirs:
        RunningSushi::Config.cookbook_paths,
      client_dir:
        client_dir,
      databag_dir:
        RunningSushi::Config.databag_path,
      environment_dir:
        environment_dir,
      node_dir:
        node_dir,
      role_local_dir:
        role_local_dir,
      role_dir:
        RunningSushi::Config.role_path
    )
  rescue ChefDiff::Changeset::ReferenceError
    RunningSushi::Log.error('Repo error, invalid revision, exiting')
    exit(2)
  end

  deleted_cookbooks = changeset.cookbooks.select { |x| x.status == :deleted }
  added_cookbooks = changeset.cookbooks.select do |x|
    x.status == :modified || x.status == :created
  end
  deleted_roles = changeset.roles.select do |x|
    x.status == :deleted
  end
  added_roles = changeset.roles.select do |x|
    x.status == :modified  || x.status == :created
  end
  deleted_roles_local = changeset.roles_local.select { |x| x.status == :deleted }
  added_roles_local = changeset.roles_local.select do |x|
    x.status == :modified  || x.status == :created
  end
  deleted_databags = changeset.databags.select { |x| x.status == :deleted }
  added_databags = changeset.databags.select do |x|
    x.status == :modified || x.status == :created
  end
  deleted_nodes = changeset.nodes.select { |x| x.status == :deleted }
  added_nodes = changeset.nodes.select do |x|
    x.status == :modified || x.status == :created
  end

  # Check if last node upload was successful.
  # This is to workaround the builtin Chef racecondition of node content being overwritten
  # by chef-client save-back if a node object is changed on the server during a client run
  # on the node server
  verify_checkpoint, verify_nodes = read_node_checkpoint
  if verify_checkpoint
    # Select nodes from checklist where the checkpoint on the Chef server is not correct
    reupload_nodes = verify_nodes.reject { |x| knife.verify_node_upload(File.split(x)[-1], verify_checkpoint) }
    reupload_nodes.each do |x|
      node_file = File.join(RunningSushi::Config.master_path, RunningSushi::Config.reponame, node_dir) + "/#{x}.json"
      next unless File.file?(node_file)

      # Only re-upload if node has not been deleted from repo
      node_proxy = ChangeProxy.new(x)
      added_nodes.push(node_proxy)
    end
  end

  deleted_environments = changeset.environments.select { |x| x.status == :deleted }
  added_environments = changeset.environments.select do |x|
    x.status == :modified || x.status == :created
  end
  deleted_clients = changeset.clients.select { |x| x.status == :deleted }
  added_clients = changeset.clients.select do |x|
    x.status == :modified || x.status == :created
  end

  # Reject upload of role if a local role exist
  if added_roles
    added_roles.reject! do |x|
      localrolefile = File.join(RunningSushi::Config.master_path, RunningSushi::Config.reponame, role_local_dir) + "/#{x.full_name}.json"
      File.file?(localrolefile)
    end
  end

  # Reject deletion of role if local role exists
  if deleted_roles
    deleted_roles.reject! do |x|
      localrolefile = File.join(RunningSushi::Config.master_path, RunningSushi::Config.reponame, role_local_dir) + "/#{x.full_name}.json"
      File.file?(localrolefile)
    end
  end

  # When deleting a local role upload global if exists (Atomic)
  if deleted_roles_local
    deleted_roles_local.each do |x|
      rolefile = File.join(RunningSushi::Config.master_path, RunningSushi::Config.reponame, RunningSushi::Config.role_path) + "/#{x.name}.json"
      next unless File.file?(rolefile)

      role_proxy = ChangeProxy.new(x.name)
      added_roles.push(role_proxy)
      deleted_roles_local.reject! do |y|
        x.name == y.name
      end
    end
  end

  {
    'Added cookbooks' => added_cookbooks,
    'Deleted cookbooks' => deleted_cookbooks,
    'Added roles' => added_roles,
    'Deleted roles' => deleted_roles,
    'Added local roles' => added_roles_local,
    'Deleted local roles' => deleted_roles_local,
    'Added databags' => added_databags,
    'Deleted databags' => deleted_databags,
    'Added nodes' => added_nodes,
    'Deleted nodes' => deleted_nodes,
    'Added environments' => added_environments,
    'Deleted environments' => deleted_environments,
    'Added clients' => added_clients,
    'Deleted clients' => deleted_clients,
  }.each do |msg, list|
    RunningSushi::Log.warn("#{msg}: #{list}") if list
  end

  knife.cookbook_delete(deleted_cookbooks) if deleted_cookbooks
  knife.cookbook_upload(added_cookbooks) if added_cookbooks

  knife.role_delete(deleted_roles) if deleted_roles
  knife.role_local_delete(deleted_roles_local) if deleted_roles_local

  knife.role_upload(added_roles) if added_roles
  knife.role_local_upload(added_roles_local) if added_roles_local

  knife.databag_delete(deleted_databags) if deleted_databags
  knife.databag_upload(added_databags) if added_databags
  knife.node_delete(deleted_nodes) if deleted_nodes
  if added_nodes
    knife.node_upload(added_nodes, local_head)
    write_node_checkpoint(added_nodes, local_head)
  end
  knife.environment_delete(deleted_environments) if deleted_environments
  knife.environment_upload(added_environments) if added_environments
  knife.client_delete(deleted_clients) if deleted_clients
  knife.client_upload(added_clients) if added_clients
end

def upload_changed(repo, checkpoint)
  local_head = repo.head_rev
  base_dir = File.join(RunningSushi::Config.master_path,
                       RunningSushi::Config.reponame)

  node_dir, client_dir, environment_dir, role_local_dir = get_pod_config

  knife = RunningSushi::Knife.new(
    logger: RunningSushi::Log,
    config: RunningSushi::Config.knife_config,
    bin: RunningSushi::Config.knife_bin,
    master_path: RunningSushi::Config.master_path,
    base_dir: base_dir,
    client_dir: File.join(base_dir, client_dir),
    cookbook_dirs: RunningSushi::Config.cookbook_paths.map do |x|
      File.join(base_dir, x)
    end,
    databag_dir: File.join(base_dir, RunningSushi::Config.databag_path),
    environment_dir: File.join(base_dir, environment_dir),
    node_dir: File.join(base_dir, node_dir),
    role_dir: File.join(base_dir, RunningSushi::Config.role_path),
    role_local_dir: File.join(base_dir, role_local_dir)
  )

  chef_upload(knife, repo, checkpoint, local_head)

  local_head
end

def setup_config
  options = {}
  OptionParser.new do |opts|
    options[:config_file] = RunningSushi::Config.config_file
    opts.on('-n', '--dry-run', 'Dryrun mode') do |s|
      options[:dry_run] = s
    end
    opts.on('-v', '--verbosity', 'Verbosity level. Twice for debug.') do
      # If -vv is supplied this block is executed twice
      options[:verbosity] = if options[:verbosity]
                              ::Logger::DEBUG
                            else
                              ::Logger::INFO
                            end
    end
    opts.on('-T', '--timestamp', 'Timestamp output') do |s|
      options[:timestamp] = s
    end
    opts.on('-c', '--config-file FILE', 'config file') do |s|
      unless File.exist?(File.expand_path(s))
        RunningSushi::Log.error("Config file #{s} not found.")
        exit(2)
      end
      options[:config_file] = s
    end
    opts.on('-l', '--lockfile FILE', 'lockfile') do |s|
      options[:lockfile] = s
    end
    opts.on('-p', '--pidfile FILE', 'pidfile') do |s|
      options[:pidfile] = s
    end
  end.parse!
  if File.exist?(File.expand_path(options[:config_file]))
    RunningSushi::Config.from_file(options[:config_file])
  end
  RunningSushi::Config.merge!(options)
  RunningSushi::Log.verbosity = RunningSushi::Config.verbosity
  if RunningSushi::Config.dry_run
    RunningSushi::Log.warn('Dryrun mode activated, no changes will be made.')
  end
  RunningSushi::Hooks.get(RunningSushi::Config.plugin_path)
  at_exit do
    RunningSushi::Hooks.atexit(RunningSushi::Config.dry_run,
                               $success, $status_msg)
  end

  Chef::Config[:node_name] = RunningSushi::Config.user
  Chef::Config[:client_key] = RunningSushi::Config.pem
  Chef::Config[:chef_server_url] = RunningSushi::Config.chef_server_url
  Chef::Config[:ssl_verify_mode] = RunningSushi::Config.ssl_verify_mode || :verify_peer
end

def get_repo
  repo_path = File.join(RunningSushi::Config.master_path,
                        RunningSushi::Config.reponame)
  r = ChefDiff::Repo.get(RunningSushi::Config.vcs_type, repo_path,
                         RunningSushi::Log)
  r.bin = RunningSushi::Config.vcs_path if RunningSushi::Config.vcs_path
  r
end

setup_config

RunningSushi::Hooks.preflight_checks(RunningSushi::Config.dry_run)

get_lock
write_pidfile
repo = get_repo

RunningSushi::Hooks.prerun(RunningSushi::Config.dry_run)

if repo.exists?
  action('Updating repo')
  repo.update unless RunningSushi::Config.dry_run
else
  unless RunningSushi::Config.repo_url
    RunningSushi::Log.error(
      'No repo URL was specified, and no repo is checked out'
    )
    exit(1)
  end
  action('Cloning repo')
  unless RunningSushi::Config.dry_run
    repo.checkout(RunningSushi::Config.repo_url)
  end
end

RunningSushi::Hooks.post_repo_up(RunningSushi::Config.dry_run)

if RunningSushi::Config.dry_run && !repo.exists?
  RunningSushi::Log.warn(
    'In dryrun mode, with no repo, there\'s not much I can dryrun'
  )
  RunningSushi::Hooks.postrun(RunningSushi::Config.dry_run, true,
                              'dryrun mode')
  exit
end

checkpoint = read_checkpoint
_node_checkpoint, uploaded_nodes = read_node_checkpoint
if repo.exists? && repo.head_rev == checkpoint && uploaded_nodes.empty?
  RunningSushi::Log.warn('Repo has not changed and no node uploads to check, nothing to do...')
  $success = true
  $status_msg = "Success at #{checkpoint}"
else
  begin
    ver = upload_changed(repo, checkpoint)
    write_checkpoint(ver)
    $success = true
    $status_msg = "Success at #{ver}"
  rescue => e
    $status_msg = e.message
    e.backtrace.each do |line|
      RunningSushi::Log.error(line)
    end
  end
end

RunningSushi::Log.warn($status_msg)
RunningSushi::Hooks.postrun(RunningSushi::Config.dry_run, $success,
                            $status_msg)
delete_pidfile
# rubocop:enable GlobalVars
